---
title: "Monash Tips Package"
description: "New package for tipping in Monash Footy Tips competition"
author: James Day
date: '2020-07-29'
categories:
  - AFLM
  - Prediction
draft: true
execute: 
  eval: false
---

Hey team! With the amazingness that is the 'festival of footy' and 20 days straight of games - spare a thought for us poor modellers as we scramble to update our tips and blogs between rounds that have no distinct gap!

I'm working on a few things in `fitzRoy` that might help but thought I'd share something that I've been working on. Orginally it was just going to be some internal code that allowed me to submit my [Monash Probabilistic Tipping Comp](http://probabilistic-footy.monash.edu/~footy/index.shtml) tips from R when I updated my models.

I figured that it could be useful for others in that comp. I understand that the venn diagram of people who enter tips into that comp AND use R AND want to save 5 minutes of manual clicking is very small. But I like playing around with R. So here we are!

I've created the `monashtipr` package. It is a simple package that provides an API for submitting your tips through R! You can view the [pkgdown site](https://jimmyday12.github.io/monash_tipr/) for all the info but thought I'd walk through submitting my tips for the week.

# Overview

There are basically two main functions. `get_games` will return a data frame of the games for a particular round and `submit_tips` will let you submit tips for a particular round and competition!

## Submitting tips

See the steps below for how to use it in real life (this is from my own tips for Round 9).

------------------------------------------------------------------------

**NOTE**

Please be careful with this. While I've tried to test it, there is the chance to screw with your tips. I recommend checking things manually while this is still new and not stable.

------------------------------------------------------------------------

#### Step 1 - install the package!

You can get it from github. You'll need `devtools` if you don't already have it.

```{r install, eval=FALSE, include=TRUE}
# install.packages("devtools")
devtools::install_github("jimmyday12/monash_tipr")
```

```{r library}
library(monashtipr)
library(tidyverse)
```

#### Step 2 - do your predictions

I'm not going to step through how I do these but ultimately I end up with something like below.

```{r get_preds}
predictions <- read_csv(here::here("data_files", "raw-data", "predictions.csv"))

predictions
```

#### Step 3 - get this weeks games

The first function in `monashtipr` that is useful is `get_games`. This returns a dataframe of the weeks games based on the round you supply. If you don't supply a round, it will return the earliest available round for tipping.

Note you can supply your username and password as plain text but I'm storing then in my `.Renviron` file. Read more about that here.

The comp needs to be one of "normal", "gauss" or "info" (info is the probability comp).

```{r get tips}
user <- Sys.getenv("MONASH_USER")
pass =  Sys.getenv("MONASH_PASS")
monash_games <- get_games(user, pass, comp = "normal")
monash_games
```

#### Step 4 - Join predictions to monash games

I now need to add my predictions to the data frame of monash tips. Because my teams don't really match up, I've written a quick and dirty function to replace these.

```{r join}
# Function to replace team names
map_names_to_monash <- function(names) {
  dplyr::case_when(
    names == "Footscray" ~ "W_Bulldogs",
    names == "North Melbourne" ~ "Kangaroos",
    names == "St Kilda" ~ "St_Kilda",
    names == "West Coast" ~ "W_Coast",
    names == "Gold Coast" ~ "Gold_Coast",
    names == "Port Adelaide" ~ "P_Adelaide",
    names == "Brisbane Lions" ~ "Brisbane",
    names == "GWS" ~ "G_W_Sydney", 
    TRUE ~ names
  )
}

predictions <- predictions %>%
  filter(Round.Number == min(Round.Number)) %>%
  mutate_at(c("Home.Team", "Away.Team"), map_names_to_monash) %>%
  mutate(Margin = round(Prediction),
         `Std. Dev.` = 40) %>%
  rename(Home = Home.Team, 
         Away = Away.Team) %>%
  select(Home, Away, Margin, `Std. Dev.`, Probability)

predictions_joined <- monash_games %>%
  select(-Margin) %>%
  left_join(predictions, by = c("Home", "Away"))

predictions_joined
```

#### Step 5 - Submit tips!

Now we've done that, we can submit our tips using `submit_tips`. This function expects a data frame in the same format as the one returned by `get_games` which is why I did the steps of renaming teams and joining my tips to that data frame.

```{r submit}
# Submit - normal
predictions_joined %>%
  select(-`Std. Dev.`, -Probability) %>%
  monashtipr::submit_tips(user = user, pass = pass, comp = "normal")

# Submit - gauss
predictions_joined %>%
  select(-Probability) %>%
  monashtipr::submit_tips(user = user, pass = pass, comp = "gauss")

# Submit - prob
predictions_joined %>%
  select(-`Std. Dev.`, -Margin) %>%
  monashtipr::submit_tips(user = user, pass = pass, comp = "info")

```

That's about it. Hopefully some people get some use out it. Let me know if it works or you run into issues.
